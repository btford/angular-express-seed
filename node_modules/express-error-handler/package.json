{
  "name": "express-error-handler",
  "version": "0.5.4",
  "description": "A graceful error handler for Express applications.",
  "main": "error-handler.js",
  "scripts": {
    "test": "node ./test/runtests.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:dilvie/express-error-handler.git"
  },
  "keywords": [
    "error",
    "errors",
    "handling",
    "handler",
    "express",
    "connect"
  ],
  "author": {
    "name": "Eric Elliott"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dilvie/express-error-handler/issues"
  },
  "dependencies": {
    "mout": "~0.7.1",
    "connect-domain": "~0.5.0"
  },
  "devDependencies": {
    "express": "~3.4.0",
    "tape": "~1.1.1",
    "supertest": "~0.8.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "bunyan-request-logger": "~0.1.1",
    "connect-cache-control": "~0.1.0",
    "through": "~2.3.4",
    "restify": "~2.6.0"
  },
  "readme": "express-error-handler\n=====================\n\nA graceful error handler for Express applications.\n\n## Quick start:\n\n```js\nvar express = require('express'),\n  errorHandler = require('../error-handler.js'),\n  app = express(),\n  env = process.env,\n  port = env.myapp_port || 3000,\n  http = require('http'),\n  server;\n\n// Route that triggers a sample error:\napp.get('/error', function createError(req,\n    res, next) {\n  var err = new Error('Sample error');\n  err.status = 500;\n  next(err);\n});\n\n// Create the server object that we can pass\n// in to the error handler:\nserver = http.createServer(app);\n\n// Log the error\napp.use(function (err, req, res, next) {\n  console.log(err);\n  next(err);\n});\n\n// Respond to errors and conditionally shut\n// down the server. Pass in the server object\n// so the error handler can shut it down\n// gracefully:\napp.use( errorHandler({server: server}) );\n\nserver.listen(port, function () {\n  console.log('Listening on port ' + port);\n});\n```\n\n## Configuration errorHandler(options)\n\nHere are the parameters you can pass into the `errorHandler()` middleware:\n\n* @param {object} [options]\n\n* @param {object} [options.handlers] Custom handlers for specific status codes.\n* @param {object} [options.views] View files to render in response to specific status codes. Specify a default with `options.views.default`\n* @param {object} [options.static] Static files to send in response to specific status codes. Specify a default with options.static.default.\n* @param {number} [options.timeout] Delay between the graceful shutdown attempt and the forced shutdown timeout.\n* @param {number} [options.exitStatus] Custom process exit status code.\n* @param {object} [options.server] The app server object for graceful shutdowns.\n* @param {function} [options.shutdown] An alternative shutdown function if the graceful shutdown fails.\n* @param {function} serializer a function to customize the JSON error object. Usage: serializer(err) return errObj\n* @return {function} errorHandler Express error handling middleware.\n\n### Examples:\n\n`express-error-handler` lets you specify custom templates, static pages, or error handlers for your errors. It also does other useful error-handling things that every app should implement, like protect against 4xx error DOS attacks, and graceful shutdown on unrecoverable errors. Here's how you do what you're asking for:\n\n\n```js\n    var errorHandler = require('express-error-handler'),\n      handler = errorHandler({\n        handlers: {\n          '404': function err404() {\n            // do some custom thing here...\n          }\n        }\n      });\n\n    // After all your routes...\n    // Pass a 404 into next(err)\n    app.use( errorHandler.httpError(404) );\n\n    // Handle all unhandled errors:\n    app.use( handler );\n\nOr for a static page:\n\n      handler = errorHandler({\n        static: {\n          '404': function err404() {\n            // do some custom thing here...\n          }\n        }\n      });\n\nOr for a custom view:\n\n      handler = errorHandler({\n        views: {\n          '404': function err404() {\n            // do some custom thing here...\n          }\n        }\n      });\n```\n\n[More examples](https://github.com/dilvie/express-error-handler/tree/master/examples) are available in the examples folder.\n\n## errorHandler.isClientError(status)\n\nReturn true if the error status represents a client error that should not trigger a restart.\n\n* @param  {number} status\n* @return {boolean}\n\n\n### Example\n\n```js\nerrorHandler.isClientError(404); // returns true\nerrorHandler.isClientError(500); // returns false\n```\n\n\n## errorHandler.httpError(status, [message])\n\nTake an error status and return a route that sends an error with the appropriate status and message to an error handler via `next(err)`.\n\n* @param  {number} status\n* @param  {string} message\n* @return {function} Express route handler\n\n```js\n// Define supported routes\napp.get( '/foo', handleFoo() );\n// 405 for unsupported methods.\napp.all( '/foo', createHandler.httpError(405) );\n```\n\n## Restify support\n\nRestify error handling works different from\nExpress.\n\nFirst, `next(err)` is synonymous with `res.send(status, error)`. This means that you should *only use `next(err)` to report errors to users*, and not as a way to aggregate errors to a common error handler. Instead, you can invoke an error handler directly to aggregate your error handling in one place.\n\n* There is no error handling middleware. Instead, use `server.on(`uncaughtException`, handleError)`\n\nSee the examples in `./examples/restify.js`\n\n\n## Thanks\n\n* [Nam Nguyen](https://github.com/gdbtek) for bringing the Express DOS exploit to my attention.\n* [Samuel Reed](https://github.com/strml) for helpful suggestions.\n",
  "readmeFilename": "README.md",
  "_id": "express-error-handler@0.5.4",
  "dist": {
    "shasum": "9895d6d0301c738f4b7ba769707a65f408e3f21b",
    "tarball": "http://registry.npmjs.org/express-error-handler/-/express-error-handler-0.5.4.tgz"
  },
  "_from": "express-error-handler@^0.5.4",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "ericelliott",
    "email": "eric@ericleads.com"
  },
  "maintainers": [
    {
      "name": "ericelliott",
      "email": "eric@ericleads.com"
    }
  ],
  "directories": {},
  "_shasum": "9895d6d0301c738f4b7ba769707a65f408e3f21b",
  "_resolved": "https://registry.npmjs.org/express-error-handler/-/express-error-handler-0.5.4.tgz",
  "homepage": "https://github.com/dilvie/express-error-handler"
}
