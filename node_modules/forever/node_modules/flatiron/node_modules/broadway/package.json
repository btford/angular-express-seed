{
  "name": "broadway",
  "description": "Lightweight application extensibility and composition with a twist of feature reflection.",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "version": "0.2.7",
  "maintainers": [
    {
      "name": "AvianFlu",
      "email": "avianflu@nodejitsu.com"
    },
    {
      "name": "indexzero",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "Marak",
      "email": "marak@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/flatiron/broadway.git"
  },
  "dependencies": {
    "cliff": "0.1.8",
    "eventemitter2": "0.4.11",
    "nconf": "0.6.7",
    "winston": "0.6.2",
    "utile": "0.1.7"
  },
  "devDependencies": {
    "codesurgeon": "0.3.x",
    "uglify-js": "1.0.6",
    "vows": "0.7.x"
  },
  "scripts": {
    "test": "vows test/**/*-test.js --spec"
  },
  "main": "./lib/broadway",
  "engines": {
    "node": ">= 0.6.4"
  },
  "readme": "# broadway [![Build Status](https://secure.travis-ci.org/flatiron/broadway.png)](http://travis-ci.org/flatiron/broadway)\n\n*Lightweight application extensibility and composition with a twist of feature\nreflection.*\n\n## Example\n\n### app.js\n```js\nvar broadway = require(\"broadway\");\n\nvar app = new broadway.App();\n\n// Passes the second argument to `helloworld.attach`.\napp.use(require(\"./plugins/helloworld\"), { \"delimiter\": \"!\" } );\n\napp.init(function (err) {\n  if (err) {\n    console.log(err);\n  }\n});\n\napp.hello(\"world\");\n```\n\n### plugins/helloworld.js\n\n```js\n// `exports.attach` gets called by broadway on `app.use`\nexports.attach = function (options) {\n\n  this.hello = function (world) {\n    console.log(\"Hello \"+ world + options.delimiter || \".\");\n  };\n\n};\n\n// `exports.init` gets called by broadway on `app.init`.\nexports.init = function (done) {\n\n  // This plugin doesn't require any initialization step.\n  return done();\n\n};\n```\n\n### run it!\n\n```bash\njosh@onix:~/dev/broadway/examples$ node simple/app.js \nHello world!\njosh@onix:~/dev/broadway/examples$ \n```\n\n## Installation\n\n### Installing npm (node package manager)\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing broadway\n``` bash \n  $ [sudo] npm install broadway\n```\n\n## API\n\n### App#init(callback)\n\nInitialize application and it's plugins, `callback` will be called with null or\ninitialization error as first argument.\n\n### App#use(plugin, options)\n\nAttach plugin to application. `plugin` should conform to following interface:\n\n```javascript\nvar plugin = {\n  \"name\": \"example-plugin\", // Plugin's name\n\n  \"attach\": function attach(options) {\n    // Called with plugin options once plugin attached to application\n    // `this` - is a reference to application\n  },\n\n  \"detach\": function detach() {\n    // Called when plugin detached from application\n    // (Only if plugin with same name was attached)\n    // `this` - is a reference to application\n  },\n\n  \"init\": function init(callback) {\n    // Called on application initialization\n    // App#init(callback) will be called once every plugin will call `callback`\n    // `this` - is a reference to application\n  }\n};\n```\n\n### App#on(event, callback) and App#emit(event, data)\n\nApp inherits from [EventEmitter2][2], and many plugins build on this\nfunctionality.\n\n#### Built-In Events:\n\n* `error:init`: Broadway emits this event when it throws an error while attempting to initialize.\n\nRead the [EventEmitter2][2] documentation for more information.\n\n## Tests\nAll tests are written with [vows][0] and should be run with [npm][1]:\n\n``` bash\n  $ npm test\n```\n\n#### [Charlie Robbins](http://nodejitsu.com)\n#### License: MIT\n\n[0]: http://vowsjs.org\n[1]: http://npmjs.org\n[2]: https://github.com/hij1nx/EventEmitter2\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/flatiron/broadway/issues"
  },
  "_id": "broadway@0.2.7",
  "_from": "broadway@0.2.x"
}
