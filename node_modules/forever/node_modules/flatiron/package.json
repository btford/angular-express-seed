{
  "name": "flatiron",
  "description": "An elegant blend of convention and configuration for building apps in Node.js and the browser",
  "version": "0.3.5",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "indexzero",
      "email": "charlie@nodejitsu.com"
    },
    {
      "name": "AvianFlu",
      "email": "avianflu@nodejitsu.com"
    },
    {
      "name": "Marak",
      "email": "marak@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/flatiron/flatiron.git"
  },
  "dependencies": {
    "broadway": "0.2.7",
    "optimist": "0.3.5",
    "prompt": "0.2.9",
    "director": "1.1.10",
    "pkginfo": "0.3.0"
  },
  "devDependencies": {
    "st": "0.1.x",
    "request": "2.x.x",
    "resourceful": "0.3.x",
    "union": "0.3.x",
    "vows": "0.7.x"
  },
  "main": "./lib/flatiron",
  "bin": {
    "flatiron": "./bin/flatiron"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# [flatiron](http://flatironjs.org) [![Build Status](https://secure.travis-ci.org/flatiron/flatiron.png)](http://travis-ci.org/flatiron/flatiron)\n\n*Framework components for node.js and the browser*\n\n![](http://flatironjs.org/img/flatiron.png)\n\n# Example HTTP Server:\n\n```js\nvar flatiron = require('flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.http);\n\napp.router.get('/', function () {\n  this.res.writeHead(200, { 'Content-Type': 'text/plain' });\n  this.res.end('Hello world!\\n');\n});\n\napp.start(8080);\n```\n\n# Example HTTPS Server:\n\n```js\nvar flatiron = require('flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.http, {\n  https: {\n    cert: 'path/to/cert.pem',\n    key: 'path/to/key.pem',\n    ca: 'path/to/ca.pem'\n  }\n});\n\napp.router.get('/', function () {\n  this.res.writeHead(200, { 'Content-Type': 'text/plain' });\n  this.res.end('Hello world!\\n');\n});\n\napp.start(8080);\n```\n\n# Example CLI Application:\n\n```js\n// example.js\n\nvar flatiron = require('flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli, {\n  dir: __dirname,\n  usage: [\n    'This is a basic flatiron cli application example!',\n    '',\n    'hello - say hello to somebody.'\n  ]\n});\n\napp.cmd('hello', function () {\n  app.prompt.get('name', function (err, result) {\n    app.log.info('hello '+result.name+'!');\n  })\n})\n\napp.start();\n```\n\n## Run It:\n\n```\n% node example.js hello\nprompt: name: world\ninfo:   hello world!\n```\n\n## Installation\n\n### Installing NPM (Node Package Manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing Flatiron\n```\n  [sudo] npm install flatiron\n```\n\n### Installing Union (Required for `flatiron.plugins.http`)\n```\n  npm install union\n```\n\n# Usage:\n\n## Start With `flatiron.app`:\n\n`flatiron.app` is a [broadway injection container](https://github.com/flatiron/broadway). To be brief, what it does is allow plugins to modify the `app` object directly:\n\n```js\nvar flatiron = require('flatiron'),\n    app = require('app');\n\nvar hello = {\n  attach: function (options) {\n    this.hello = options.message || 'Why hello!';\n  }\n};\n\napp.use(hello, {\n  message: \"Hi! How are you?\"\n});\n\n// Will print, \"Hi! How are you?\"\nconsole.log(app.hello);\n```\n\nVirtually all additional functionality in flatiron comes from broadway plugins, such as `flatiron.plugins.http` and `flatiron.plugins.cli`.\n\n### `app.config`\n\n`flatiron.app` comes with a [`config`](https://github.com/flatiron/broadway/blob/master/lib/broadway/plugins/config.js) plugin pre-loaded, which adds configuration management courtesy [nconf](https://github.com/flatiron/nconf). `app.config` has the same api as the `nconf` object.\n\nThe `literal` store is configured by default. If you want to use different stores you can easily attach them to the `app.config` instance.\n\n```js\n// add the `env` store to the config\napp.config.use('env');\n\n// add the `file` store the the config\napp.config.use('file', { file: 'path/to/config.json' });\n\n// or using an alternate syntax\napp.config.env().file({ file: 'path/to/config.json' });\n\n// and removing stores\napp.config.remove('literal');\n```\n\n### `app.log`\n\n`flatiron.app` will also load a [`log`](https://github.com/flatiron/broadway/blob/master/lib/broadway/plugins/log.js) plugin during the init phase, which attaches a [winston container](https://github.com/flatiron/winston) to `app.log`. This logger is configured by combining the `app.options.log` property with the configuration retrieved from `app.config.get('log')`.\n\n## Create An HTTP Server with `flatiron.plugins.http(options)`:\n\nThis plugin adds http serving functionality to your flatiron app by attaching the following properties and methods:\n\n### Define Routes with `app.router`:\n\nThis is a [director](https://github.com/flatiron/director) router configured to route http requests after the middlewares in `app.http.before` are applied. Example routes include:\n\n```js\n\n// GET /\napp.router.get('/', function () {\n  this.res.writeHead(200, { 'Content-Type': 'text/plain' });\n  this.res.end('Hello world!\\n');\n});\n\n// POST to /\napp.router.post('/', function () {\n  this.res.writeHead(200, { 'Content-Type': 'text/plain' });\n  this.res.write('Hey, you posted some cool data!\\n');\n  this.res.end(util.inspect(this.req.body, true, 2, true) + '\\n');\n});\n\n// Parameterized routes\napp.router.get('/sandwich/:type', function (type) {\n  if (~['bacon', 'burger'].indexOf(type)) {\n    this.res.writeHead(200, { 'Content-Type': 'text/plain' });\n    this.res.end('Serving ' + type + ' sandwich!\\n');\n  }\n  else {\n    this.res.writeHead(404, { 'Content-Type': 'text/plain' });\n    this.res.end('No such sandwich, sorry!\\n');\n  }\n});\n```\n\n`app.router` can also route against regular expressions and more! To learn more about director's advanced functionality, visit director's [project page](https://github.com/flatiron/director#readme).\n\n\n### Access The Server with `app.server`:\n\nThis is a [union](https://github.com/flatiron/union) middleware kernel.\n\n### Modify the Server Options with `app.http`:\n\nThis object contains options that are passed to the union server, including `app.http.before`, `app.http.after` and `app.http.headers`.\n\nThese properties may be set by passing them through as options:\n\n```js\napp.use(flatiron.plugins.http, {\n  before: [],\n  after: []\n});\n```\n\nYou can read more about these options on the [union project page](https://github.com/flatiron/union#readme).\n\n### Start The Server with `app.start(port, <host>, <callback(err)>)`\n\nThis method will both call `app.init` (which will call any asynchronous initialization steps on loaded plugins) and start the http server with the given arguments. For example, the following will start your flatiron http server on port 8080:\n\n```js\napp.start(8080);\n```\n\n## Create a CLI Application with `flatiron.plugins.cli(options)`\n\nThis plugin turns your app into a cli application framework. For example, [jitsu]\n(https://github.com/nodejitsu/jitsu) uses flatiron and the cli plugin.\n\nValid options include:\n\n```js\n{\n  \"argvOptions\": {}, // A configuration hash passed to the cli argv parser.\n  \"usage\": [ \"foo\", \"bar\" ], // A message to show for cli usage. Joins arrays with `\\n`.\n  \"dir\": require('path').join(__dirname, 'lib', 'commands'), // A directory with commands to lazy-load\n  \"notFoundUsage\": false // Disable help messages when command not found\n}\n```\n\n### Add lazy-loaded CLI commands with `options.dir` and `app.commands`:\n\n  Flatiron CLI will automatically lazy-load modules defining commands in the directory specified by `options.dir`. For example:\n\n```js\n// example2.js\nvar path = require('path'),\n    flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli, {\n  dir: path.join(__dirname, 'cmds')\n});\n\napp.start();\n```\n\n```js\n// cmd/highfive.js\nvar highfive = module.exports = function highfive (person, cb) {\n  this.log.info('High five to ' + person + '!');\n  cb(null);\n};\n```\n\nIn the command, you expose a function of arguments and a callback. `this` is set to `app`, and the routing is taken care of automatically.\n\nHere it is in action:\n\n```\n% node example2.js highfive Flatiron \ninfo:   High five to Flatiron!\n```\n\nYou can also define these commands by adding them directly to `app.commands` yourself:\n\n```\n// example2b.js\nvar flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\nvar path = require('path'),\n    flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli);\n\napp.commands.highfive = function (person, cb) {\n  this.log.info('High five to ' + person + '!');\n  cb(null);\n};\n\napp.start();\n```\n\n```\n% node example2b.js highfive Flatiron \ninfo:   High five to Flatiron!\n```\n\nCallback will always be the last argument provided to a function assigned to command\n\n```js\napp.commands.highfive = function (person, cb) {\n  this.log.info('High five to ' + person + '!');\n  console.log(arguments);\n}\n```\n\n```\n% node example2b.js highfive Flatiron lol haha\ninfo:    High five to Flatiron!\n{\n  '0': 'Flatiron',\n  '1': 'lol',\n  '2': 'haha',\n  '3': [Function]\n}\n```\n\n### Define Ad-Hoc Commands With `app.cmd(path, handler)`:\n\nThis adds the cli routing path `path` to the app's CLI router, using the [director](https://github.com/flatiron/director) route handler `handler`, aliasing `app.router.on`. `cmd` routes are defined the same way as http routes, except that it uses ` ` (a space) for a delimiter instead of `/`.\n\nFor example:\n\n```js\n// example.js\nvar flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli, {\n  usage: [\n    'usage: node test.js hello <person>',\n    '',\n    '  This will print \"hello <person>\"'\n  ]\n});\n\napp.cmd('hello :person', function (person) {\n  app.log.info('hello ' + person + '!');\n});\n\napp.start()\n```\n\nWhen you run this program correctly, it will say hello:\n\n```\n% node example.js hello person\ninfo:   hello person!\n```\n\nIf not, you get a friendly usage message:\n\n```\n% node test.js hello\nhelp:   usage: node test.js hello <person>\nhelp:\nhelp:     This will print \"hello <person>\"\n```\n\n### Check CLI Arguments with `app.argv`:\n\nOnce your app is started, `app.argv` will contain the [optimist](http://github.com/substack/node-optimist)-parsed argv options hash, ready to go!\n\nHere's an example:\n\n```js\n// example3.js\nvar flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli);\n\napp.start();\n\napp.log.info(JSON.stringify(app.argv));\n```\n\nThis prints:\n\n```\n% node example3.js\ninfo:    {\"_\":[], \"$0\": \"node ./example3.js\"}\n```\n\nAwesome!\n\n### Add a Default Help Command with `options.usage`:\n\nWhen attaching the CLI plugin, just specify options.usage to get a friendly default message for when there aren't any matching routes:\n\n```js\n// example4.js\nvar flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli, {\n  usage: [\n    'Welcome to my app!',\n    'Your command didn\\'t do anything.',\n    'This is expected.'\n  ]\n});\n\napp.start();\n```\n\n```\n% node example4.js \nhelp:   Welcome to my app!\nhelp:   Your command didn't do anything.\nhelp:   This is expected.\n```\n\n### Start The Application with `app.start(callback)`:\n\nAs seen in these examples, starting your app is as easy as `app.start`! this method takes a callback, which is called when an `app.command` completes. Here's a complete example demonstrating this behavior and how it integrates with `options.usage`:\n\n```js\n// example5.js\nvar path = require('path'),\n    flatiron = require('./lib/flatiron'),\n    app = flatiron.app;\n\napp.use(flatiron.plugins.cli, {\n  usage: [\n    '`node example5.js error`: Throws an error.',\n    '`node example5.js friendly`: Does not throw an error.'\n  ]\n});\n\napp.commands.error = function (cb) {\n  cb(new Error('I\\'m an error!'));\n};\n\napp.commands.friendly = function (cb) {\n  cb(null);\n}\n\napp.start(function (err) {\n  if (err) {\n    app.log.error(err.message || 'You didn\\'t call any commands!');\n    app.log.warn('NOT OK.');\n    return process.exit(1);\n  }\n  app.log.info('OK.');\n});\n```\n\nHere's how our app behaves:\n\n```\n% node example5.js friendly\ninfo:   OK.\n\n% node example5.js error\nerror:  I'm an error!\nwarn:   NOT OK.\n\n% node example5.js\nhelp:   `node example2b.js error`: Throws an error.\nhelp:   `node example2b.js friendly`: Does not throw an error.\nerror:  You didn't call any commands!\nwarn:   NOT OK.\n```\n\n# Read More About Flatiron!\n\n## Articles\n\n* [Scaling Isomorphic Javascript Code](http://blog.nodejitsu.com/scaling-isomorphic-javascript-code)\n* [Introducing Flatiron](http://blog.nodejitsu.com/introducing-flatiron)\n* [Writing CLI Apps with Flatiron](http://blog.jit.su/writing-cli-apps-with-flatiron)\n\n## Sub-Projects\n\n* [Broadway](https://github.com/flatiron/broadway)\n* [Union](https://github.com/flatiron/union)\n* [Director](https://github.com/flatiron/director)\n* [Plates](https://github.com/flatiron/plates)\n* [Resourceful](https://github.com/flatiron/resourceful)\n* [And More](https://github.com/flatiron)!\n\n# Tests\n\nTests are written in vows:\n\n``` bash\n  $ npm test\n```\n\n#### Author: [Nodejitsu Inc.](http://nodejitsu.com)\n#### License: MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/flatiron/flatiron/issues"
  },
  "_id": "flatiron@0.3.5",
  "_from": "flatiron@0.3.5"
}
